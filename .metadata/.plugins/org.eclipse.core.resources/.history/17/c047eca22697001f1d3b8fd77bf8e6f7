package kr.suus.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import kr.suus.entity.Company;
import kr.suus.service.UserService;

@RestController
public class UserController {
    
	private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

//    // Company ID 중복 확인
    @PostMapping("/ComIdDuplicate")
    public boolean ckComIdDup(@RequestBody Company company) {
    	  System.out.println("Checking ID: " + company.getCompanyId());
          return userService.ckComIdDup(company.getCompanyId());
    }
    
//    // Company 가입
    @PostMapping("/SignUpCom")
    public String signUpCompany(@RequestBody Company company){
    	System.out.println(company);
//        if ("success".equals(resDTO.getStatus())) {
//            return ResponseEntity.ok(resDTO);
//        } else {
//            return ResponseEntity.badRequest().body(resDTO);
//        }
    	return "성공";
    }
//
//    // User ID 중복 확인
//    @PostMapping("/UserIdDuplicate")
//    public ResponseEntity<Boolean> checkUserIdDuplicate(@RequestBody UserSignUpReqDTO reqDTO){
//        boolean userIdDup = userService.UserIdDup(reqDTO.getUserId());
//        return ResponseEntity.ok(userIdDup);
//    }
//    
//    // User 가입
//    @PostMapping("/SignUpUser")
//    public ResponseEntity<UserSignUpResDTO> signUpUser(@RequestBody UserSignUpReqDTO reqDTO){
//        UserSignUpResDTO resDTO = userService.saveUser(reqDTO);
//        if ("success".equals(resDTO.getStatus())) {
//            return ResponseEntity.ok(resDTO);
//        } else {
//            return ResponseEntity.badRequest().body(resDTO);
//        }
//    }
//
//    // User 로그인
//    @PostMapping("/SignIn")
//    public String signInUser(@RequestBody SignInReqDTO reqDTO){
//    	System.out.println(reqDTO.getType());
//    	Optional<UserSignUpResDTO> userResponse = userService.loginUser(reqDTO);
//    	
//    	return "re";
//    	SignInResDTO resDTO = new SignInResDTO("test");
//    	return ResponseEntity.ok(resDTO);
    	
//        boolean loginCheck = userService.loginUser(user);
//        
//        if (loginCheck) {
//            return ResponseEntity.ok("로그인 성공");  // 성공 시 200 OK
//        } else {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인 실패");  // 실패 시 401 Unauthorized
//        }
//    }
}